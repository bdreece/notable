// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, created_at, updated_at, first_name, last_name, bio, email_address, email_verified, hash
FROM users
WHERE email_address = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, emailAddress string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, emailAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.EmailAddress,
		&i.EmailVerified,
		&i.Hash,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, created_at, updated_at, first_name, last_name, bio, email_address, email_verified, hash
FROM users
WHERE id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.EmailAddress,
		&i.EmailVerified,
		&i.Hash,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users
    (first_name, last_name, email_address, hash)
VALUES
    ($1, $2, $3, $4)
`

type InsertUserParams struct {
	FirstName    string
	LastName     string
	EmailAddress string
	Hash         []byte
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.FirstName,
		arg.LastName,
		arg.EmailAddress,
		arg.Hash,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET first_name = $2,
    last_name = $3,
    email_address = $4,
    email_verified = $5,
    hash = $6
WHERE id = $1
`

type UpdateUserParams struct {
	ID            uuid.UUID
	FirstName     string
	LastName      string
	EmailAddress  string
	EmailVerified bool
	Hash          []byte
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.EmailAddress,
		arg.EmailVerified,
		arg.Hash,
	)
	return err
}

const userExistsByEmail = `-- name: UserExistsByEmail :one
SELECT COUNT(*)
FROM users
WHERE email_address = $1
`

func (q *Queries) UserExistsByEmail(ctx context.Context, emailAddress string) (int64, error) {
	row := q.db.QueryRowContext(ctx, userExistsByEmail, emailAddress)
	var count int64
	err := row.Scan(&count)
	return count, err
}
