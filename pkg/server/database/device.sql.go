// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: device.sql

package database

import (
	"context"
	"net"

	"github.com/google/uuid"
)

const findDeviceByID = `-- name: FindDeviceByID :one
SELECT id, created_at, updated_at, mac_address, ip_address, connected, user_id
FROM devices
WHERE id = $1
`

func (q *Queries) FindDeviceByID(ctx context.Context, id uuid.UUID) (Device, error) {
	row := q.db.QueryRowContext(ctx, findDeviceByID, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MacAddress,
		&i.IpAddress,
		&i.Connected,
		&i.UserID,
	)
	return i, err
}

const findDeviceByMAC = `-- name: FindDeviceByMAC :one
SELECT id, created_at, updated_at, mac_address, ip_address, connected, user_id
FROM devices
WHERE mac_address = $1
`

func (q *Queries) FindDeviceByMAC(ctx context.Context, macAddress net.HardwareAddr) (Device, error) {
	row := q.db.QueryRowContext(ctx, findDeviceByMAC, macAddress)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MacAddress,
		&i.IpAddress,
		&i.Connected,
		&i.UserID,
	)
	return i, err
}

const findDevicesByUser = `-- name: FindDevicesByUser :many
SELECT id, created_at, updated_at, mac_address, ip_address, connected, user_id
FROM devices
WHERE user_id = $1
`

func (q *Queries) FindDevicesByUser(ctx context.Context, userID uuid.UUID) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, findDevicesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MacAddress,
			&i.IpAddress,
			&i.Connected,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
